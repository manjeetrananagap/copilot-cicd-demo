name: Node.js CI/CD Pipeline - Build, Test & Deploy

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main]

jobs:
    # Job 1: Build the application
    build:
        name: Build Application
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '18.x'
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Build application
              run: |
                  echo "Building application..."
                  npm run build --if-present
                  echo "‚úÖ Build completed successfully!"

            - name: Upload build artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: build-artifacts
                  path: |
                      node_modules/
                      package-lock.json
                  retention-days: 1

    # Job 2: Run tests
    test:
        name: Test Application
        runs-on: ubuntu-latest
        needs: build

        strategy:
            matrix:
                node-version: [16.x, 18.x, 20.x]

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Setup Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: 'npm'

            - name: Download build artifacts
              uses: actions/download-artifact@v3
              with:
                  name: build-artifacts

            - name: Install dependencies
              run: npm ci

            - name: Run linter
              run: npm run lint
              continue-on-error: true

            - name: Run unit tests
              run: npm test

            - name: Generate coverage report
              run: npm test -- --coverage

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              if: matrix.node-version == '18.x'
              with:
                  files: ./coverage/coverage-final.json
                  flags: unittests
                  name: codecov-umbrella

    # Job 3: Code Quality Check
    code-quality:
        name: Code Quality Analysis
        runs-on: ubuntu-latest
        needs: build

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '18.x'

            - name: Install dependencies
              run: npm ci

            - name: Run ESLint
              run: npm run lint
              continue-on-error: false

            - name: Check code formatting
              run: npm run format -- --check
              continue-on-error: true

    # Job 4: Deploy/Commit (ONLY runs when tests pass)
    deploy:
        name: Deploy & Commit Results
        runs-on: ubuntu-latest
        needs: [build, test, code-quality]
        # This ensures deploy ONLY runs when all previous jobs succeed
        if: |
            github.ref == 'refs/heads/main' && 
            github.event_name == 'push' &&
            needs.build.result == 'success' &&
            needs.test.result == 'success' &&
            needs.code-quality.result == 'success'

        steps:
            - name: Checkout code
              uses: actions/checkout@v3
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '18.x'

            - name: Install dependencies
              run: npm ci

            - name: Generate build info
              run: |
                  mkdir -p build-info
                  echo "Build Date: $(date)" > build-info/build.txt
                  echo "Commit SHA: ${{ github.sha }}" >> build-info/build.txt
                  echo "Branch: ${{ github.ref_name }}" >> build-info/build.txt
                  echo "Node Version: $(node --version)" >> build-info/build.txt
                  echo "NPM Version: $(npm --version)" >> build-info/build.txt
                  echo "‚úÖ All tests passed!" >> build-info/build.txt

            - name: Commit build artifacts (if any changes)
              run: |
                  git config --local user.email "github-actions[bot]@users.noreply.github.com"
                  git config --local user.name "github-actions[bot]"
                  git add build-info/ || true
                  git diff --quiet && git diff --staged --quiet || git commit -m "chore: Update build info [skip ci]"
              continue-on-error: true

            - name: Push changes
              uses: ad-m/github-push-action@master
              with:
                  github_token: ${{ secrets.GITHUB_TOKEN }}
                  branch: ${{ github.ref }}
              continue-on-error: true

            - name: Deployment success notification
              run: |
                  echo "üöÄ Deployment successful!"
                  echo "‚úÖ Build completed"
                  echo "‚úÖ Tests passed"
                  echo "‚úÖ Code quality checked"
                  echo "‚úÖ Results committed to repository"

    # Job 5: Notification Summary
    summary:
        name: Pipeline Summary
        runs-on: ubuntu-latest
        needs: [build, test, code-quality, deploy]
        if: always()

        steps:
            - name: Check pipeline status
              run: |
                  echo "üìä CI/CD Pipeline Summary"
                  echo "========================="
                  echo "Build: ${{ needs.build.result }}"
                  echo "Test: ${{ needs.test.result }}"
                  echo "Code Quality: ${{ needs.code-quality.result }}"
                  echo "Deploy: ${{ needs.deploy.result }}"
                  echo "========================="
                  if [ "${{ needs.test.result }}" == "failure" ]; then
                    echo "‚ùå Pipeline FAILED - Tests did not pass"
                    echo "üö´ Deploy was SKIPPED due to test failures"
                    exit 1
                  else
                    echo "‚úÖ Pipeline PASSED - All checks successful!"
                  fi
